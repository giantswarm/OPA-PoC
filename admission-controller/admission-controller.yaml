# Grant OPA/kube-mgmt read-only access to resources. This lets kube-mgmt
# replicate resources into OPA so they can be used in policies.
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: opa-viewer
roleRef:
  kind: ClusterRole
  name: view
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: Group
  name: system:serviceaccounts:opa
  apiGroup: rbac.authorization.k8s.io
---
# Define role for OPA/kube-mgmt to update configmaps with policy status.
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: opa
  name: configmap-modifier
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["update", "patch"]
---
# Grant OPA/kube-mgmt role defined above.
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: opa
  name: opa-configmap-modifier
roleRef:
  kind: Role
  name: configmap-modifier
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: Group
  name: system:serviceaccounts:opa
  apiGroup: rbac.authorization.k8s.io
---
kind: Service
apiVersion: v1
metadata:
  name: opa
  namespace: opa
spec:
  selector:
    app: opa
  ports:
  - name: https
    protocol: TCP
    port: 443
    targetPort: 443
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: opa
  namespace: opa
  name: opa
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opa
  template:
    metadata:
      labels:
        app: opa
      name: opa
    spec:
      containers:
        # WARNING: OPA is NOT running with an authorization policy configured. This
        # means that clients can read and write policies in OPA. If you are
        # deploying OPA in an insecure environment, be sure to configure
        # authentication and authorization on the daemon. See the Security page for
        # details: https://www.openpolicyagent.org/docs/security.html.
        - name: opa
          image: openpolicyagent/opa:latest
          args:
            - "run"
            - "--server"
            - "--tls-cert-file=/certs/tls.crt"
            - "--tls-private-key-file=/certs/tls.key"
            - "--addr=0.0.0.0:443"
            - "--addr=http://127.0.0.1:8181"
            - "--log-format=json-pretty"
            - "--set=decision_logs.console=true"
          volumeMounts:
            - readOnly: true
              mountPath: /certs
              name: opa-server
          readinessProbe:
            httpGet:
              path: /health
              scheme: HTTPS
              port: 443
            initialDelaySeconds: 3
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              scheme: HTTPS
              port: 443
            initialDelaySeconds: 3
            periodSeconds: 5
        - name: kube-mgmt
          image: openpolicyagent/kube-mgmt:0.8
          args:
            - "--replicate-cluster=v1/namespaces"
            - "--replicate=application.giantswarm.io/v1alpha1/apps"
            - "--replicate=application.giantswarm.io/v1alpha1/appcatalogs"
      volumes:
        - name: opa-server
          secret:
            secretName: opa-server
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: opa-default-system-main
  namespace: opa
data:
  main: |
    package system

    import data.kubernetes.admission

    main = {
      "apiVersion": "admission.k8s.io/v1beta1",
      "kind": "AdmissionReview",
      "response": response,
    }

    default response = {"allowed": true}

    # patch response
    response = x {
      count(patch) > 0

      # if there are missing leaves e.g. trying to add a label to something that doesn't
      # yet have any, we need to create the leaf nodes as well

      fullPatches := ensure_parent_paths_exist(cast_array(patch))

      x := {
        "allowed": true,
        "patchType": "JSONPatch",
        "patch": base64url.encode(json.marshal(fullPatches)),
      }
    }

    ###########################################################################
    # PATCH helpers 
    # Note: These rules assume that the input is an object
    # not an AdmissionRequest, because labels and annotations 
    # can apply to various sub-objects within a request
    # So from the context of an AdmissionRequest they need to
    # be called like
    #   hasLabelValue[["foo", "bar"]] with input as input.request.object
    # or
    #   hasLabelValue[["foo", "bar"]] with input as input.request.oldObject
    ###########################################################################

    hasLabels {
      input.metadata.labels
    }

    hasLabel[label] {
      hasLabels
      input.metadata.labels[label]
    }

    hasLabelValue[[key, val]] {
      hasLabels
      input.metadata.labels[key] = val
    }

    hasAnnotations {
      input.metadata.annotations
    }

    hasAnnotation[annotation] {
      hasAnnotations
      input.metadata.annotations[annotation]
    }

    hasAnnotationValue[[key, val]] {
      hasAnnotations
      input.metadata.annotations[key] = val
    }

    ###########################################################################
    # makeLabelPatch creates a label patch
    # Labels can exist on numerous child objects e.g. Deployment.template.metadata
    # Use pathPrefix to specify a lower level object, or pass "" to select the 
    # top level object
    # Note: pathPrefix should have a leading '/' but no trailing '/'
    ###########################################################################

    makeLabelPatch(op, key, value, pathPrefix) = patchCode {
      patchCode = {
        "op": op,
        "path": concat("/", [pathPrefix, "metadata/labels", key]),
        "value": value,
      }
    }

    makeAnnotationPatch(op, key, value, pathPrefix) = patchCode {
      patchCode = {
        "op": op,
        "path": concat("/", [pathPrefix, "metadata/annotations", key]),
        "value": value,
      }
    }

    # (Thanks to Tim Hinrichs for the following...)

    # Given array of JSON patches create and prepend new patches that create missing paths.
    #   CAUTION: Implementation only creates leaves.
    ensure_parent_paths_exist(patches) = result {
      paths := {p.path | p := patches[_]}
      newpatches := {make_path(prefix_array) |
        paths[path]
        full_length := count(path)
        path_array := split(path, "/")
        last_element_length := count(path_array[minus(count(path_array), 1)])

        # this assumes paths starts with '/'
        prefix_path := substring(path, 1, (full_length - last_element_length) - 2)
        trace(sprintf("[ensure_parent_paths_exist] prefix_path = %s", [prefix_path]))
        prefix_array := split(prefix_path, "/")
        not input_path_exists(prefix_array) with input as input.request.object
      }

      result := array.concat(cast_array(newpatches), patches)

      trace(sprintf("[ensure_parent_paths_exist] paths = %s", [paths]))
      trace(sprintf("[ensure_parent_paths_exist] newpatches = %s", [newpatches]))
      trace(sprintf("[ensure_parent_paths_exist] result = %s", [result]))
    }

    # Create the JSON patch to ensure the @path_array exists
    make_path(path_array) = result {
      # Need a slice of the path_array with all but the last element.
      #   No way to do that with arrays, but we can do it with strings.
      path_str := concat("/", array.concat([""], path_array))
      trace(sprintf("[make_path] path_array = %s", [path_array]))
      trace(sprintf("[make_path] path_str = %s", [path_str]))

      result = {
        "op": "add",
        "path": path_str,
        "value": {},
      }
    }

    # Check that the given @path exists as part of the input object.
    input_path_exists(path) {
      trace(sprintf("[input_path_exists] input = %s", [input]))
      trace(sprintf("[input_path_exists] path = %s", [path]))
      walk(input, [path, walkval])
      trace(sprintf("[input_path_exists] walk = %s", [walkval]))
      walk(input, [path, _])
    }